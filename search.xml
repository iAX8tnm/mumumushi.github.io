<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单的Visual Studio Code教程]]></title>
    <url>%2F2018%2F09%2F12%2Fvscode-tutorial%2F</url>
    <content type="text"><![CDATA[Visual studio Code是微软爸爸发布的轻量级代码编辑器，不得不说，vscode对于一些小项目，简单的代码的支持得还是非常不错的，但对于第一次接触的人来说，还是需要一些基本的了解（后面会以C语言做个简单介绍），才能体会到vscode的方便！当然，肯定不够IDE方便。。 vscode介绍 Visual Studio Code是一个轻量级但功能强大的开源代码编辑器，可在桌面上运行，适用于Windows，macOS和Linux。它内置了对JavaScript，TypeScript和Node.js的支持，并为其他语言（如C ++，C＃，Java，Python，PHP，Go）和运行时（如.NET和Unity）提供了丰富的扩展生态系统。 因为需要，有时我们的代码并不总是需要VS或者idea那样量级的IDE；另外，IDE的方便，也会让我们这些初学者了解不到程序执行的过程，原理，嗯。这时一个简单的代码编辑器就是个不错的选择了。 那，哪里可以买到下载呢？ 这里👉下载连接🙄 一些概念用户和工作区对于vscode来说，我们打开的一个文件夹就是一个工作区workspace，当我们需要设置时，打开命令面板后键入setting选择首选项：打开设置进入设置 设置分为用户设置和工作区设置，顾名思义，工作区的设置只针对当前工作区有效，而用户设置则是全局都有效（1.27版后的settings界面真难看小声BB） 命令面板命令面板Command Palette，是一个很重要的工具，你能从这里执行vscode所有的功能，而你只需要Ctrl+Shift+P就能打开它，而更多功能还有待你去发现 终端vscode自身集成了终端(快捷键：Ctrl+`），大大方便了我们的日常操作，尤其是在win下的时候。。 其实vscode还支持打开多个终端(快捷键：Ctrl+Shift+`），以方便我们在不同的路径下执行不同的命令 另外还可以通过Ctrl+\把终端拆分平铺显示 gitversion control也是我们日常写代码时经常要用到的工具，这方面，vscode很贴心地集成了git，但限于本人对git的了解还在入门阶段(。﹏。)，所以只能简单介绍一下，对于一个刚打开的工作区，需要自己在终端下把该文件夹初始化为一个仓库，如上面的那张图☝ git init一下，Ctrl+Shift+g切换到源代码管理界面，这里我们能够看到已经保存的做出修改的文件，点击加号即把它们加入到暂存区，输入消息后按Ctrl+Enter提交到仓库中 当然你也可以git add、git commit操作。另外，如果想把自己的代码上传到github上，需要自己在github上先创建一个库，然后在本地执行git remote add origin https://github.com/your_name/your_project.git添加远程库，然后再git push -u origin master拉取。如果只是把gitHub上的仓库下下来。则执行git clone https://github.com/your_name/your_project.git就行。关于git的内容大都可以在终端上执行，这里都不具体展开了，简单略过~ 插件一个好的编辑器，当然离不开丰富插件的支持。vscode有很多很好用的插件，并能给主流编程语言很好的支持，甚至于我之前微机课的verilog代码也能找到插件支持，虽然只是高亮和一些补全-_- 对于不同的语言，我们能搜到很多插件去支持，提供代码高亮补全，和调试等等。这里也不具体讲下去，有兴趣的同学可以参考一下微软的官方文档。切换到扩展页面搜索下载我们想要的插件 code-runner这里介绍一下Code Runner这个插件。它可以简单地帮我们执行代码。安装这个插件之后，我们的编辑器的右上方就会有一个运行的标志，点击（或者Ctrl+Shift+N）就可以运行我们的代码 不过，这并不意味着有了它，我们就可以运行任何代码了，我们打开设置，搜索与code-runner有关的选项就能发现，在&quot;code-runner.executorMap&quot;这一项里，定义了这个插件执行代码的命令，不难看出，code-runner正是执行了这些简单的命令来运行我们的代码，我们可以修改code-runner的命令，使得code-runner满足我们的要求 task上面谈到code-runner，但code-runner只能帮我们运行简单的代码，面对复杂一点的工程时，就需要使用一些外部的工具来帮助我们去执行一些任务task，比如说编译、打包、测试、部署等等。平时这些功夫都由IDE帮我们做好了隐藏起来，而在vscode里，需要我们去自定义我们的task 创建一个tasks.json 以创建一个编译C语言程序的任务为例子，这里我们先随便写一个C程序，然后打开命令面板，输入task 我们选择配置任务，然后选择使用模板创建 tasks.json 文件，接着再选择一次Others 运行任意外部命令的示例，当然，这里有其它需求的也可以选择其它类型的任务模板 这之后，vscode就会在我们的工作目录下创建一个.vscode/tasks.json的文件，而这个tasks.json文件,就是我们要自定义任务的文件，可以看到，&quot;task&quot;这个键对应的是一个数组，所以我们就可以定义我们的任务数组了 label：任务名称 type：任务类型，可选shell、等等 command：这个就是我们任务的命令了，根据自己的需要填写，这里我们填写gcc args：命令参数，根据自己的需要填写，我们可以在命令行下查询我们命令的参数选项 problemMatcher：作用是执行任务后，利用正则表达式扫描终端输出的错误信息以便显示出来，它本身有一些可选的选项，比如$gcc等，除此之外，还可以自定义它，不想扫描任何结果输出的话可以只给个[] 以上这些参数可能随着模板版本的不同而有所差异，这里展示的&quot;version&quot;: 2.0.0 除了上面的参数，vscode提供了实用的变量替换来代替1234567891011$&#123;workspaceFolder&#125; # 当前被vscode打开的文件夹的路径$&#123;workspaceFolderBasename&#125; # 当前被vscode打开的文件夹的名字（没有斜杆/）$&#123;file&#125; # 当前打开的文件的路径$&#123;relativeFile&#125; # 当前打开的文件的相对与工作区的路径$&#123;fileBasename&#125; # 当前打开的文件的名字$&#123;fileBasenameNoExtension&#125; # 当前打开的文件的名字，不带扩展名$&#123;fileDirname&#125; # 当前打开的文件的所在路径$&#123;fileExtname&#125; # 当前打开的文件的扩展名字$&#123;cwd&#125; # 运行任务的路径$&#123;lineNumber&#125; # 在当前激活文件中所选择代码的第几行数$&#123;selectedText&#125; # 在当前激活文件中所选择代码的文本 举个栗子 假设我有一个满足如下情况的文件夹/home/your_username/your_project/folder/file.ext 这个file.ext文件正在被编辑/home/your_username/your_project 是我的工作区如此我便有以下的变量12345678910$&#123;workspaceFolder&#125; # /home/your_username/your_project$&#123;workspaceFolderBasename&#125; # your_project$&#123;file&#125; # /home/your_username/your_project/folder/file.ext$&#123;relativeFile&#125; # folder/file.ext$&#123;fileBasename&#125; # file.ext$&#123;fileBasenameNoExtension&#125; # file$&#123;fileDirname&#125; # /home/your_username/your_project/folder$&#123;fileExtname&#125; # .ext$&#123;lineNumber&#125; # 5$&#123;selectedText&#125; # Text selected in your code editor 根据上面的这些，我就可以开始编写自己的任务了，下面是一个已经写好了的编译C代码的任务，参数根据自己的需要填写 有了自己的任务之后，我们就可以通过命令面板输入task选择任务：运行任务来选择运行自己的任务了 debug有了编译的任务还不够，我们还需要调试的能力，这方面vscode也集成了debug的支持，通过按F5，选择C++(GDB/LLDB)或者其它选项生成自己的launch.json，下面直接给一个我修改的launch.json。具体修改了被调试的程序的路径、调试程序的路径、还有执行调试前的任务（也就是我们前面定义的叫gcc的任务） 保存后既可回到我们要执行的源文件，按F5开始调试了。但我们发现，窗口一闪而过，为了看到我们的程序输出，可以在源代码的行号前点击添加断点，这样程序在调试时执行到断点处就停了下来了 除了断点调试外，vscode也可以查看变量、监视表达式、查看调用堆栈等debug时的常规操作 以及从断点出继续F5，单步跳过F10，单步调试F11，单步跳出Shift+F11，重启Ctrl+Shift+F5，停止Shift+F5等操作 一些感想关于vscode的简单介绍就到这里，vscode还有很多功能还有待我去发掘，俗话讲，工欲善其事，必先利其器。对工具的了解可以大大帮助自己提升效率，但是也要注意，固然要了解自己手上的工具，但不能本末倒置，我们用工具是为了解决问题，不要把工具变成问题 参考阅读https://code.visualstudio.com/docs]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下科学上网]]></title>
    <url>%2F2018%2F09%2F06%2Fuse_ssr_in_Linux%2F</url>
    <content type="text"><![CDATA[相对于在win下，在Linux下科学上网是比较麻烦的一件事，嗯。以下以Ubuntu16.04的环境为例，整合网上的教程，讲讲如何在Ubuntu下科学上网，注意只用于学习用途，请不要用于违反法律的事情上。 安装配置ssr先通过这个脚本安装ssr，在此之前，需要确保自己已经安装了git123456wget https://onlyless.github.io/ssrsudo mv ssr /usr/local/binsudo chmod 766 /usr/local/bin/ssrssr install#然后配置ssrssr config 根据自己的购买的ssr所提供的信息填写 设置开机自启1sudo vim /etc/rc.local 然后在exit 0之前添加1sudo ssr start 安装配置SwitchyOmega虽然ssr已经启动了，但这时你还不能愉快地翻墙，因为： Shadowsocks是一个使用SOCKS5（或者SOCK4之类）协议的代理，它只接受SOCKS5协议的流量，不接受HTTP或者HTTPS的流量。所以我们需要一些工具把我们的HTTP之类的流量转成SOCKS5协议的流量 在chrome浏览器中，我们可以安装SwitchyOmega这个插件来进行HTTP转SOCKS5的转换 编辑一个情景模式，重命名为gfwlist 代理协议选择SOCKS5 代理服务器为127.0.0.1 代理端口为1080上面的代理服务器与端口都是上面ssr配置时设定的 然后切换到自动切换模式 切换规则下，设置条件类型为域名通配符 条件设置为：raw.githubusercontent.com 情景模式设为我们刚才创建的gfwlist 打开规则列表，情景模式gfwlist，默认情景模式为直接连接 设置规则列表网址：https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 点击立即更新情景模式，然后应用选项，最后选择自动切换模式就可以美滋滋地浏览器上网冲浪啦！ 安装配置privoxy有时我们也需要在终端里进行科学上网，这时我们就需要用到privoxy了。这是一个可以帮助我们在终端中转换HTTP流量的软件安装1sudo apt-get install privoxy 配置123456sudo vim /etc/privoxy/config#在4.1节确定有listen-address localhost:8118#然后在5.2节后添加forward-socks5 / 127.0.0.1:1080 .#要注意后面有一点 设置开机自启往开机自启文件中添加(注意添加在exit 0前)1sudo /etc/init.d/privoxy start 在/etc/profile文件末尾添加12export http_proxy="127.0.0.1:8118"export https_proxy="127.0.0.1:8118" 重启后就可以在终端里科学上网了！ 参考阅读https://www.djangoz.com/2017/08/16/linux_setup_ssr/https://blog.csdn.net/ATYZ123/article/details/63263956]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>ubuntu</tag>
        <tag>科学上网</tag>
        <tag>ssr</tag>
        <tag>switchyomega</tag>
        <tag>privoxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2018%2F09%2F06%2Ffirst_blog%2F</url>
    <content type="text"><![CDATA[哈哈，这是我的第一篇博客，请多多指教啦~]]></content>
  </entry>
</search>
