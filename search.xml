<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>简单的Visual Studio Code教程</title>
      <link href="/2018/09/12/vscode-tutorial/"/>
      <url>/2018/09/12/vscode-tutorial/</url>
      <content type="html"><![CDATA[<p>Visual studio Code是微软爸爸发布的轻量级代码编辑器，不得不说，vscode对于一些小项目，简单的代码的支持得还是非常不错的，但对于第一次接触的人来说，还是需要一些基本的了解（后面会以C语言做个简单介绍），才能体会到vscode的方便！当然，肯定不够IDE方便。。</p><a id="more"></a><h2 id="vscode介绍"><a href="#vscode介绍" class="headerlink" title="vscode介绍"></a>vscode介绍</h2><blockquote><p>Visual Studio Code是一个轻量级但功能强大的开源代码编辑器，可在桌面上运行，适用于Windows，macOS和Linux。它内置了对JavaScript，TypeScript和Node.js的支持，并为其他语言（如C ++，C＃，Java，Python，PHP，Go）和运行时（如.NET和Unity）提供了丰富的扩展生态系统。</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv2fnt55fmj20s40jxwfl.jpg" alt=""></p><p>因为需要，有时我们的代码并不总是需要VS或者idea那样量级的IDE；另外，IDE的方便，也会让我们这些初学者了解不到程序执行的过程，原理，嗯。这时一个简单的代码编辑器就是个不错的选择了。</p><p>那，哪里可以<del>买到</del>下载呢？ 这里👉<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">下载连接</a>🙄</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>用户和工作区</strong><br>对于vscode来说，我们打开的一个文件夹就是一个工作区<code>workspace</code>，当我们需要设置时，打开命令面板后键入<code>setting</code>选择<code>首选项：打开设置</code>进入设置</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv3quxmo8oj20re09jdgr.jpg" alt=""></p><p>设置分为用户设置和工作区设置，顾名思义，工作区的设置只针对当前工作区有效，而用户设置则是全局都有效（1.27版后的settings界面真难看小声BB）</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv3qygi7tbj211x0k9q5g.jpg" alt="旧的settings.json界面" title="旧的settings.json界面"></p><p><strong>命令面板</strong><br>命令面板<code>Command Palette</code>，是一个很重要的工具，你能从这里执行vscode所有的功能，而你只需要<code>Ctrl+Shift+P</code>就能打开它，而更多功能还有待你去发现</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv3qohu2qdj20rt09zjs5.jpg" alt=""></p><p><strong>终端</strong><br>vscode自身集成了终端(快捷键：<code>Ctrl+`</code>），大大方便了我们的日常操作，尤其是在win下的时候。。</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5p9s7hkfj20ss0550sn.jpg" alt=""></p><p>其实vscode还支持打开多个终端(快捷键：<code>Ctrl+Shift+`</code>），以方便我们在不同的路径下执行不同的命令</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5pc2bmtzj20ss04ydfz.jpg" alt=""></p><p>另外还可以通过<code>Ctrl+\</code>把终端拆分平铺显示</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><code>version control</code>也是我们日常写代码时经常要用到的工具，这方面，vscode很贴心地集成了git，但限于本人对git的了解还在入门阶段(。﹏。)，所以只能简单介绍一下，对于一个刚打开的工作区，需要自己在终端下把该文件夹初始化为一个仓库，如上面的那张图☝</p><p><code>git init</code>一下，<code>Ctrl+Shift+g</code>切换到源代码管理界面，这里我们能够看到已经保存的做出修改的文件，点击加号即把它们加入到暂存区，输入消息后按<code>Ctrl+Enter</code>提交到仓库中</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5q2fwxwkj209r0adq34.jpg" alt=""></p><p>当然你也可以<code>git add</code>、<code>git commit</code>操作。另外，如果想把自己的代码上传到github上，需要自己在github上先创建一个库，然后在本地执行<code>git remote add origin https://github.com/your_name/your_project.git</code>添加远程库，然后再<code>git pull origin master</code>拉取。如果只是把gitHub上的仓库下下来。则执行<code>git clone https://github.com/your_name/your_project.git</code>就行。关于git的内容大都可以在终端上执行，这里都不具体展开了，简单略过~</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>一个好的编辑器，当然离不开丰富插件的支持。vscode有很多很好用的插件，并能给主流编程语言很好的支持，甚至于我之前微机课的verilog代码也能找到插件支持，虽然只是高亮和一些补全-_-</p><p>对于不同的语言，我们能搜到很多插件去支持，提供代码高亮补全，和调试等等。这里也不具体讲下去，有兴趣的同学可以参考一下微软的<a href="https://code.visualstudio.com/docs/languages/overview" target="_blank" rel="noopener">官方文档</a>。切换到扩展页面搜索下载我们想要的插件</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5yf38w81j20960djjs9.jpg" alt=""></p><p><strong>code-runner</strong><br>这里介绍一下<a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a>这个插件。它可以简单地帮我们执行代码。安装这个插件之后，我们的编辑器的右上方就会有一个运行的标志，点击（或者<code>Ctrl+Shift+N</code>）就可以运行我们的代码</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5yj6ven9j20s10af0ta.jpg" alt=""></p><p>不过，这并不意味着有了它，我们就可以运行任何代码了，我们打开设置，搜索与code-runner有关的选项就能发现，在<code>&quot;code-runner.executorMap&quot;</code>这一项里，定义了这个插件执行代码的命令，不难看出，code-runner正是执行了这些简单的命令来运行我们的代码，我们可以修改code-runner的命令，使得code-runner满足我们的要求</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv5yrj666cj211x0ka0v5.jpg" alt=""></p><h2 id="task"><a href="#task" class="headerlink" title="task"></a>task</h2><p>上面谈到code-runner，但code-runner只能帮我们运行简单的代码，面对复杂一点的工程时，就需要使用一些外部的工具来帮助我们去执行一些任务<code>task</code>，比如说编译、打包、测试、部署等等。平时这些功夫都由IDE帮我们做好了隐藏起来，而在vscode里，需要我们去自定义我们的task</p><p><strong>创建一个tasks.json</strong></p><p>以创建一个编译C语言程序的任务为例子，这里我们先随便写一个C程序，然后打开命令面板，输入task</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv2ft628fmj20rz0k13zn.jpg" alt=""></p><p>我们选择配置任务，然后选择<code>使用模板创建 tasks.json 文件</code>，接着再选择一次<code>Others 运行任意外部命令的示例</code>，当然，这里有其它需求的也可以选择其它类型的任务模板</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv2g3pfwk8j20rw08qq3h.jpg" alt=""></p><p>这之后，vscode就会在我们的工作目录下创建一个<code>.vscode/tasks.json</code>的文件，而这个<code>tasks.json</code>文件,就是我们要自定义任务的文件，可以看到，<code>&quot;task&quot;</code>这个键对应的是一个数组，所以我们就可以定义我们的任务数组了</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv2g8pgq0ij20rx0atgm2.jpg" alt=""></p><ul><li><code>label</code>：任务名称</li><li><code>type</code>：任务类型，可选<code>shell</code>、等等</li><li><code>command</code>：这个就是我们任务的命令了，根据自己的需要填写，这里我们填写<code>gcc</code></li><li><code>args</code>：命令参数，根据自己的需要填写，我们可以在命令行下查询我们命令的参数选项</li><li><code>problemMatcher</code>：作用是执行任务后，利用正则表达式扫描终端输出的错误信息以便显示出来，它本身有一些可选的选项，比如<code>$gcc</code>等，除此之外，还可以自定义它，不想扫描任何结果输出的话可以只给个<code>[]</code></li></ul><p>以上这些参数可能随着模板版本的不同而有所差异，这里展示的<code>&quot;version&quot;: 2.0.0</code></p><p>除了上面的参数，vscode提供了实用的变量替换来代替<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;workspaceFolder&#125;</span>          <span class="comment"># 当前被vscode打开的文件夹的路径</span></span><br><span class="line"><span class="variable">$&#123;workspaceFolderBasename&#125;</span>  <span class="comment"># 当前被vscode打开的文件夹的名字（没有斜杆/）</span></span><br><span class="line"><span class="variable">$&#123;file&#125;</span>                     <span class="comment"># 当前打开的文件的路径</span></span><br><span class="line"><span class="variable">$&#123;relativeFile&#125;</span>             <span class="comment"># 当前打开的文件的相对与工作区的路径</span></span><br><span class="line"><span class="variable">$&#123;fileBasename&#125;</span>             <span class="comment"># 当前打开的文件的名字</span></span><br><span class="line"><span class="variable">$&#123;fileBasenameNoExtension&#125;</span>  <span class="comment"># 当前打开的文件的名字，不带扩展名</span></span><br><span class="line"><span class="variable">$&#123;fileDirname&#125;</span>              <span class="comment"># 当前打开的文件的所在路径</span></span><br><span class="line"><span class="variable">$&#123;fileExtname&#125;</span>              <span class="comment"># 当前打开的文件的扩展名字</span></span><br><span class="line"><span class="variable">$&#123;cwd&#125;</span>                      <span class="comment"># 运行任务的路径</span></span><br><span class="line"><span class="variable">$&#123;lineNumber&#125;</span>               <span class="comment"># 在当前激活文件中所选择代码的第几行数</span></span><br><span class="line"><span class="variable">$&#123;selectedText&#125;</span>             <span class="comment"># 在当前激活文件中所选择代码的文本</span></span><br></pre></td></tr></table></figure></p><p>举个栗子</p><p>假设我有一个满足如下情况的文件夹<br><code>/home/your_username/your_project/folder/file.ext</code>    这个<code>file.ext</code>文件正在被编辑<br><code>/home/your_username/your_project</code>                    是我的工作区<br>如此我便有以下的变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;workspaceFolder&#125;</span>          <span class="comment"># /home/your_username/your_project</span></span><br><span class="line"><span class="variable">$&#123;workspaceFolderBasename&#125;</span>  <span class="comment"># your_project</span></span><br><span class="line"><span class="variable">$&#123;file&#125;</span>                     <span class="comment"># /home/your_username/your_project/folder/file.ext</span></span><br><span class="line"><span class="variable">$&#123;relativeFile&#125;</span>             <span class="comment"># folder/file.ext</span></span><br><span class="line"><span class="variable">$&#123;fileBasename&#125;</span>             <span class="comment"># file.ext</span></span><br><span class="line"><span class="variable">$&#123;fileBasenameNoExtension&#125;</span>  <span class="comment"># file</span></span><br><span class="line"><span class="variable">$&#123;fileDirname&#125;</span>              <span class="comment"># /home/your_username/your_project/folder</span></span><br><span class="line"><span class="variable">$&#123;fileExtname&#125;</span>              <span class="comment"># .ext</span></span><br><span class="line"><span class="variable">$&#123;lineNumber&#125;</span>               <span class="comment"># 5</span></span><br><span class="line"><span class="variable">$&#123;selectedText&#125;</span>             <span class="comment"># Text selected in your code editor</span></span><br></pre></td></tr></table></figure></p><p>根据上面的这些，我就可以开始编写自己的任务了，下面是一个已经写好了的编译C代码的任务，参数根据自己的需要填写</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv60nef53pj20gu0blq34.jpg" alt=""></p><p>有了自己的任务之后，我们就可以通过命令面板输入task选择<code>任务：运行任务</code>来选择运行自己的任务了</p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>有了编译的任务还不够，我们还需要调试的能力，这方面vscode也集成了debug的支持，通过按<code>F5</code>，选择<code>C++(GDB/LLDB)</code>或者其它选项生成自己的<code>launch.json</code>，下面直接给一个我修改的<code>launch.json</code>。具体修改了被调试的程序的路径、调试程序的路径、还有执行调试前的任务（也就是我们前面定义的叫<code>gcc</code>的任务）</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv61hqjs0dj20iv0gngm7.jpg" alt=""></p><p>保存后既可回到我们要执行的源文件，按<code>F5</code>开始调试了。但我们发现，窗口一闪而过，为了看到我们的程序输出，可以在源代码的行号前点击添加断点，这样程序在调试时执行到断点处就停了下来了</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv61sk1sxtj20mn089q34.jpg" alt=""></p><p>除了断点调试外，vscode也可以查看变量、监视表达式、查看调用堆栈等debug时的常规操作</p><p>以及从断点出继续<code>F5</code>，单步跳过<code>F10</code>，单步调试<code>F11</code>，单步跳出<code>Shift+F11</code>，重启<code>Ctrl+Shift+F5</code>，停止<code>Shift+F5</code>等操作</p><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv6277u6nbj20ok0k8dgm.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv621zlj28j20q70k5dgz.jpg" alt=""></p><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>关于vscode的简单介绍就到这里，vscode还有很多功能还有待我去发掘，俗话讲，工欲善其事，必先利其器。对工具的了解可以大大帮助自己提升效率，但是也要注意，固然要了解自己手上的工具，但不能本末倒置，我们用工具是为了解决问题，不要把工具变成问题</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener">https://code.visualstudio.com/docs</a></p>]]></content>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下科学上网</title>
      <link href="/2018/09/06/use_ssr_in_Linux/"/>
      <url>/2018/09/06/use_ssr_in_Linux/</url>
      <content type="html"><![CDATA[<p>相对于在win下，在Linux下科学上网是比较麻烦的一件事，嗯。以下以Ubuntu16.04的环境为例，整合网上的教程，讲讲如何在Ubuntu下科学上网，注意只用于学习用途，请不要用于违反法律的事情上。</p><a id="more"></a><h2 id="安装配置ssr"><a href="#安装配置ssr" class="headerlink" title="安装配置ssr"></a>安装配置ssr</h2><p>先通过这个脚本安装ssr，在此之前，需要确保自己已经安装了git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://onlyless.github.io/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 766 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line"><span class="comment">#然后配置ssr</span></span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure></p><p>根据自己的购买的ssr所提供的信息填写</p><p><strong>设置开机自启</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure></p><p>然后在exit 0之前添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssr start</span><br></pre></td></tr></table></figure></p><h2 id="安装配置SwitchyOmega"><a href="#安装配置SwitchyOmega" class="headerlink" title="安装配置SwitchyOmega"></a>安装配置SwitchyOmega</h2><p>虽然ssr已经启动了，但这时你还不能愉快地翻墙，因为：</p><blockquote><p>Shadowsocks是一个使用SOCKS5（或者SOCK4之类）协议的代理，它只接受SOCKS5协议的流量，不接受HTTP或者HTTPS的流量。所以我们需要一些工具把我们的HTTP之类的流量转成SOCKS5协议的流量</p></blockquote><p>在chrome浏览器中，我们可以安装<a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchyOmega</a>这个插件来进行HTTP转SOCKS5的转换</p><ol><li>编辑一个情景模式，重命名为gfwlist</li><li>代理协议选择SOCKS5</li><li>代理服务器为127.0.0.1</li><li>代理端口为1080<br>上面的代理服务器与端口都是上面ssr配置时设定的</li></ol><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv09dnwipbj211w0dy4gg.jpg" alt=""></p><p>然后切换到自动切换模式</p><ol><li>切换规则下，设置条件类型为域名通配符</li><li>条件设置为：raw.githubusercontent.com</li><li>情景模式设为我们刚才创建的gfwlist</li><li>打开规则列表，情景模式gfwlist，默认情景模式为直接连接</li><li>设置规则列表网址：<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li></ol><p><img src="https://ws1.sinaimg.cn/large/bd545a84gy1fv09km1kzgj211f0hiwfq.jpg" alt=""></p><p>点击立即更新情景模式，然后应用选项，最后选择自动切换模式就可以美滋滋地浏览器上网冲浪啦！</p><h2 id="安装配置privoxy"><a href="#安装配置privoxy" class="headerlink" title="安装配置privoxy"></a>安装配置privoxy</h2><p>有时我们也需要在终端里进行科学上网，这时我们就需要用到privoxy了。这是一个可以帮助我们在终端中转换HTTP流量的软件<br><strong>安装</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install privoxy</span><br></pre></td></tr></table></figure></p><p><strong>配置</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/privoxy/config</span><br><span class="line"><span class="comment">#在4.1节确定有</span></span><br><span class="line">listen-address localhost:8118</span><br><span class="line"><span class="comment">#然后在5.2节后添加</span></span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line"><span class="comment">#要注意后面有一点</span></span><br></pre></td></tr></table></figure></p><p><strong>设置开机自启</strong><br>往开机自启文件中添加(注意添加在exit 0前)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/privoxy start</span><br></pre></td></tr></table></figure></p><p>在/etc/profile文件末尾添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure></p><p>重启后就可以在终端里科学上网了！</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://www.djangoz.com/2017/08/16/linux_setup_ssr/" target="_blank" rel="noopener">https://www.djangoz.com/2017/08/16/linux_setup_ssr/</a><br><a href="https://blog.csdn.net/ATYZ123/article/details/63263956" target="_blank" rel="noopener">https://blog.csdn.net/ATYZ123/article/details/63263956</a></p>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> ssr </tag>
            
            <tag> switchyomega </tag>
            
            <tag> privoxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2018/09/06/first_blog/"/>
      <url>/2018/09/06/first_blog/</url>
      <content type="html"><![CDATA[<p>哈哈，这是我的第一篇博客，请多多指教啦~</p>]]></content>
      
      
    </entry>
    
  
  
</search>
